@inproceedings{zhang_unikv_2020,
 abstract = {Persistent key-value (KV) stores are mainly designed based on the Log-Structured Merge-tree (LSM-tree), which suffer from large read and write amplifications, especially when KV stores grow in size. Existing design optimizations for LSM-tree-based KV stores often make certain trade-offs and fail to simultaneously improve both the read and write performance on large KV stores without sacrificing scan performance. We design UniKV, which unifies the key design ideas of hash indexing and the LSM-tree in a single system. Specifically, UniKV leverages data locality to differentiate the indexing management of KV pairs. It also develops multiple techniques to tackle the issues caused by unifying the indexing techniques, so as to simultaneously improve the performance in reads, writes, and scans. Experiments show that UniKV significantly outperforms several state-of-the-art KV stores (e.g., LevelDB, RocksDB, HyperLevelDB, and PebblesDB) in overall throughput under read-write mixed workloads.},
 author = {Zhang, Qiang and Li, Yongkun and Lee, Patrick P. C. and Xu, Yinlong and Cui, Qiu and Tang, Liu},
 booktitle = {2020 IEEE 36th International Conference on Data Engineering (ICDE)},
 doi = {10.1109/ICDE48307.2020.00034},
 file = {IEEE Xplore Full Text PDF:files/5/Zhang 等。 - 2020 - UniKV Toward High-Performance and Scalable KV Sto.pdf:application/pdf;IEEE Xplore Abstract Record:files/6/9101876.html:text/html},
 keywords = {Compaction, data locality, design optimizations, hash indexing, high-performance storage, indexing, Indexing, indexing management, key-value stores, KV stores, Log-Structured Merge-tree, LSM-tree, merging, Merging, optimisation, read-write mixed workloads, Scalability, scalable KV storage, Sorting, storage management, Throughput, tree data structures, unified indexing, UniKV design},
 month = {April},
 note = {ISSN: 2375-026X},
 pages = {313--324},
 shorttitle = {UniKV},
 title = {UniKV: Toward High-Performance and Scalable KV Storage in Mixed Workloads via Unified Indexing},
 year = {2020}
}

